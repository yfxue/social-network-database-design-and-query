CREATE TABLE USERS
(USER_ID /*VARCHAR2(100)*/NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100) NOT NULL,
YEAR_OF_BIRTH INTEGER,
MONTH_OF_BIRTH INTEGER,
DAY_OF_BIRTH INTEGER,
GENDER VARCHAR2(100));

CREATE TABLE FRIENDS
(USER1_ID /*VARCHAR2(100)*/NUMBER,
USER2_ID /*VARCHAR2(100)*/NUMBER,
PRIMARY KEY (USER1_ID,USER2_ID),
FOREIGN KEY (USER1_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (USER2_ID) REFERENCES USERS(USER_ID),
CHECK (USER1_ID < USER2_ID));

CREATE OR REPLACE TRIGGER PAIR
BEFORE INSERT ON FRIENDS
FOR EACH ROW
WHEN(NEW.USER1_ID > NEW.USER2_ID)
DECLARE TEMP NUMBER;
BEGIN
TEMP := :NEW.USER1_ID;
:NEW.USER1_ID := :NEW.USER2_ID; 
:NEW.USER2_ID := TEMP;
END;
.
/


CREATE TABLE CITIES
(CITY_ID INTEGER,
CITY_NAME VARCHAR2(100),
STATE_NAME VARCHAR2(100),
COUNTRY_NAME VARCHAR2(100),
PRIMARY KEY(CITY_ID));

CREATE TABLE USER_CURRENT_CITY
(USER_ID /*VARCHAR2(100)*/NUMBER,
CURRENT_CITY_ID INTEGER,
PRIMARY KEY (USER_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE,
FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID) ON DELETE CASCADE);

CREATE TABLE USER_HOMETOWN_CITY
(USER_ID /*VARCHAR2(100)*/NUMBER,
HOMETOWN_CITY_ID INTEGER,
PRIMARY KEY (USER_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS,
FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID) ON DELETE CASCADE);

CREATE TABLE MESSAGE
(MESSAGE_ID INTEGER NOT NULL,
SENDER_ID /*VARCHAR2(100)*/NUMBER NOT NULL,
RECERIVER_ID /*VARCHAR2(100)*/NUMBER NOT NULL,
MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
SENT_TIME TIMESTAMP NOT NULL,
PRIMARY KEY (MESSAGE_ID),
FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
FOREIGN KEY (RECERIVER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE);

CREATE TABLE PROGRAMS
(PROGRAM_ID INTEGER,
INSTITUTION VARCHAR2(100),
CONCENTRATION /*CHAR(100)*/VARCHAR2(100),
DEGREE VARCHAR2(100),
PRIMARY KEY (PROGRAM_ID));

CREATE TABLE EDUCATION
(USER_ID /*VARCHAR2(100)*/NUMBER,
PROGRAM_ID NUMBER,
PROGRAM_YEAR INTEGER,
PRIMARY KEY (USER_ID,PROGRAM_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS);

CREATE TABLE USER_EVENTS
(EVENT_ID /*VARCHAR2(100)*/NUMBER NOT NULL,
EVENT_CREATOR_ID /*VARCHAR2(100)*/NUMBER NOT NULL,
EVENT_NAME  VARCHAR2(100) NOT NULL,
EVENT_TAGLINE /*VARCHAR2(1000)*/VARCHAR2(100),
EVENT_DESCRIPTION /*VARCHAR2(4000)*/VARCHAR2(100),
EVENT_HOST VARCHAR2(100) NOT NULL,
EVENT_TYPE VARCHAR2(100) NOT NULL,
EVENT_SUBTYPE VARCHAR2(100) NOT NULL,
EVENT_LOCATION VARCHAR2(100),
EVENT_CITY_ID INTEGER,
EVENT_START_TIME TIMESTAMP NOT NULL,
EVENT_END_TIME TIMESTAMP NOT NULL,
PRIMARY KEY (EVENT_ID),
FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES(CITY_ID));

CREATE TABLE PARTICIPANTS
(EVENT_ID /*VARCHAR2(100)*/NUMBER,
USER_ID /*VARCHAR2(100)*/NUMBER,
CONFIRMATION VARCHAR2(100) CHECK (CONFIRMATION='attending' OR CONFIRMATION='declined' 
	OR CONFIRMATION='unsure' OR CONFIRMATION='not‚Äêreplied'),
PRIMARY KEY (EVENT_ID,USER_ID),
FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS,
FOREIGN KEY (USER_ID) REFERENCES USERS);

CREATE TABLE ALBUMS
(ALBUM_ID VARCHAR2(100),
 ALBUM_OWNER_ID /*VARCHAR2(100)*/NUMBER NOT NULL,
 ALBUM_NAME VARCHAR2(100),
 ALBUM_CREATED_TIME TIMESTAMP,
 ALBUM_MODIFIED_TIME TIMESTAMP,
 ALBUM_LINK VARCHAR2(2000),
 ALBUM_VISIBILITY VARCHAR2(100) CHECK (ALBUM_VISIBILITY='EVERYONE' OR ALBUM_VISIBILITY='FRIENDS_OF_FRIENDS' 
 	OR ALBUM_VISIBILITY='FRIENDS' OR ALBUM_VISIBILITY='MYSELF' OR ALBUM_VISIBILITY='CUSTOM'),
 COVER_PHOTO_ID VARCHAR2(100) NOT NULL,
PRIMARY KEY (ALBUM_ID),
FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE);

CREATE TABLE PHOTOS
(PHOTO_ID VARCHAR2(100),
	ALBUM_ID VARCHAR2(100) NOT NULL,
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATED_TIME TIMESTAMP,
	PHOTO_MODIFIED_TIME TIMESTAMP,
	PHOTO_LINK VARCHAR2(2000),
PRIMARY KEY (PHOTO_ID));

ALTER TABLE ALBUMS ADD CONSTRAINT ALBUMSRefsPHOTOS FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID)
INITIALLY DEFERRED DEFERRABLE;
ALTER TABLE PHOTOS ADD CONSTRAINT PHOTOSRefsALBUMS FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ALBUM_ID)
INITIALLY DEFERRED DEFERRABLE;

CREATE TABLE TAGS
(TAG_PHOTO_ID VARCHAR2(100),
TAG_SUBJECT_ID /*VARCHAR2(100)*/NUMBER,
TAG_CREATED_TIME TIMESTAMP,
TAG_X NUMBER,
TAG_Y NUMBER,
PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID),
FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID),
FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS(USER_ID));



